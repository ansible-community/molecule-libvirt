---

- name: Destroy
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    molecule_dns_suffix: "molecule.lab"
    molecule_network_name: "molecule-network"
    molecule_ssh_user: molecule
    libvirt_default_image_path: "{{ lookup('env', 'HOME') }}/libvirt-test"
    libvirt_uri: "qemu:///system"
    libvirt_vm_arch: x86_64
    temp_folder: "/tmp"

  tasks:

    - name: Get list of all instances
      virt:
        command: list_vms
        uri: "{{ libvirt_uri }}"
      register: instance_list

    - name: Check if molecule instance(s) is/are running
      virt:
        command: status
        name: "{{ item.name }}"
        uri: "{{ libvirt_uri }}"
      register: instance_status
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.name in instance_list.list_vms

##    - name: Destroy molecule instance(s)
##      debug:
##        msg: "This is destroy phase"
##      with_items: "{{ molecule_yml.platforms }}"
##      loop_control:
##        label: "{{ item.name }}"
#
##    - name: Get running instance(s) name
##      set_fact:
##        running_instance: "{{ instance_status.results | json_query(jmesquery) }}"
##      vars:
##        jmesquery: "[?status=='running'].item.name"
##[?item.name=='instance-2'].status

    - name: Stop molecule instance(s)
      virt:
        name: "{{ item.name }}"
        command: shutdown
        uri: "{{ libvirt_uri | default(omit) }}"
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      when: (item.name in instance_list.list_vms) and (instance_status.results | json_query(jmesquery)) == 'running'
      vars:
         jmesquery: "[?item.name=='{{ item.name }}'].status | [0]"

    - name: Destroy and undefine molecule instance(s)
      virt:
        name: "{{ item.name }}"
        command: undefine
        uri: "{{ libvirt_uri | default(omit) }}"
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.name in instance_list.list_vms

    - name: Get libvirt vnet list
      virt_net:
        command: list_nets
        uri: "{{ libvirt_uri | default(omit) }}"
      register: net_list

    - name: Stop molecule network
      virt_net:
        command: stop
        name: "{{ molecule_network_name }}"
        uri: "{{ libvirt_uri | default(omit) }}"
      when: molecule_network_name in net_list.list_nets

    - name: Undefine molecule network
      virt_net:
        command: undefine
        name: "{{ molecule_network_name }}"
        uri: "{{ libvirt_uri | default(omit) }}"
      when: molecule_network_name in net_list.list_nets

    - name: Remove vm image(s)
      file:
        path: "{{ libvirt_default_image_path }}/{{ item.name }}.qcow2"
        state: absent
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Remove cloud-init iso image(s)
      file:
        path: "{{ libvirt_default_image_path }}/{{ item.name }}-cloud-init.iso"
        state: absent
      with_items: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
